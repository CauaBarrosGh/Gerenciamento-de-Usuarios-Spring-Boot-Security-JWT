# Nome do nosso fluxo de trabalho, que aparecerá na aba "Actions" do GitHub
name: Pipeline de CI para API Java com Spring Boot

# Define o "gatilho" (trigger) que inicia o pipeline
on:
  push:
    branches: [ "master" ] # Roda toda vez que um commit for enviado (push) para a branch 'master'
  pull_request:
    branches: [ "master" ] # Roda também quando um Pull Request é aberto para a branch 'master'

# Define os "trabalhos" (jobs) que o pipeline vai executar
jobs:
  # O nome do nosso job é 'build'. Poderíamos ter outros (ex: 'deploy')
  build:
    # Define a máquina virtual que vai rodar o nosso job. Usaremos a versão mais recente do Ubuntu.
    runs-on: ubuntu-latest

    # Define os "passos" (steps) que o job vai executar em sequência
    steps:
      # Passo 1: Clona o código do nosso repositório para dentro da máquina virtual
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Java (JDK) na máquina virtual
      - name: Configurar o JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # Uma distribuição OpenJDK popular e confiável

      # Passo 3: Executa o build e os testes usando o Maven
      - name: Build e Testes com Maven
        # Este é o comando que o Maven executa. O comando 'package' faz tudo:
        # 1. Baixa as dependências
        # 2. Compila o código-fonte
        # 3. Roda os testes
        # 4. Se os testes passarem, empacota a aplicação em um arquivo .jar
        run: mvn -B package --file pom.xml

        #TESTANDO PIPLINE